# Docker Compose file version
version: "3.6"

# Service definitions
services:
  # Spring application service
  spring-app:
    container_name: spring-app
    image: spring-app:${SPRING_APP_VERSION:-latest}  # Use the default value 'latest' if not provided
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    ports:
      - 8081:8081
    networks:
      - spring-mysql-network
    environment:
      - SPRING_APP_VERSION=${SPRING_APP_VERSION:-latest}  # Use the default value 'latest' if not provided
      # Spring application environment variables for MySQL connection
      - spring.datasource.url=jdbc:mysql://mysqldb:3306/certificatetracker
      - spring.datasource.username=devops
      - spring.datasource.password=devops
    depends_on:
      - mysqldb
    volumes:
      # Mount the local .m2 directory to /root/.m2 inside the container
      - .m2:/root/.m2

  # MySQL database service
  mysqldb:
    container_name: mysqldb
    image: mysql:latest
    restart: always
    ports:
      - 3307:3306
    command:
      - --init-file
      - /docker-entrypoint-initdb.d/init-db.sh  # Use the adjusted shell script
    volumes:
      - ./init-scripts/init-script.sql:/docker-entrypoint-initdb.d/init-script.sql:ro
      - ./init-scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:ro
      - mysql-data:/var/lib/mysql
#    volumes:
#      # Mount MySQL data volume and initialization scripts
#      - ./init-scripts/init-script.sql:/docker-entrypoint-initdb.d/init-script.sql
#      - mysql-data:/var/lib/mysql
    networks:
      - spring-mysql-network
    environment:
      # MySQL database environment variables
      MYSQL_DATABASE: certificatetracker
      MYSQL_USER: devops
      MYSQL_PASSWORD: devops
      MYSQL_ROOT_PASSWORD: devops
# Network definition
networks:
  spring-mysql-network:
    name: spring-mysql-network

# Volume definition
volumes:
  # Named volume for MySQL data
  mysql-data:
    name: mysql-data
